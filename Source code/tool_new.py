# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tool_first.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets
import time
import networkx as nx
import random
import numpy as np
import optparse
import sys
import matplotlib.pylab as plt
from collections import Counter
from matplotlib import mlab
from matplotlib import rcParams
import separation_tools as tools
import localization as tool_1
from decimal import Decimal
import webbrowser
from PyQt5.QtCore import QBasicTimer
import run_walker as tool_walk
import linecache
import new_network_analysis_tools as tools1
#*****************************global tool1
random_random_mean_degree_result=''
checkBox_largest_subnetwork=''
random_mean_shorest_distance=''
random_mean_degree=''
G=nx.Graph()
gene_network_file=''
gene_file=''
nodes=''
links=''
gene_lcc_size=''
gene_edges=''
mean_edges=''
mean_shortest_distance=''
random_lcc_size=''
Pvalue_of_observed_lcc=''
random_edges=''
Pvalue_of_observed_edges=''
nodes_and_links=""
built_in_network=''
gene_set=''
gene_nodes=''
genes_set =''
gene_result1=''
gene_result2=''
gene_set1=''
lcc_size=''
lcc_size_result=''
edge_number=''
edges_result=''
mean_result=''
mean_number=''
mean_shortest_distance_result=''
random_times=''
Pvalue_of_observed_lcc_num=''
random_lcc_result=''
random_P_value_observed_lcc_result=''
edges_list=[]
random_P_value_observed_edges_result=''
random_edges_result=''
result={}
result1={}
result2={}
result3={}
stepcheckBox_observed_network=''
random_Pvalue_random_mean_degree_result=''
degree_mean=''
Pvalue_of_observed_random_mean_edges=''
shortest_distance_rand=''
random_shorest_distance_result=''
d_s=''
Pvalue_of_observed_mean_shortest_distance=''
random_Pvalue_observed_mean_shortest_distance_result=''
closeness_centrality=''
clustering_coefficient=''
betweenness_centrality=''
random_closeness_centrality=''
random_clustering_coefficient=''
random_betweenness_centrality=''
#********************************global tool2
G1=nx.Graph()
gene_network_file2=''
built_in_network1=''
gene_file2A=''
gene_file2B=''
d_a_compute=''
all_genes_in_network2=''
genes_A_full=''
genes_A=''
nodes_text=''
genes_B_full=''
genes_B=''
da_text=''
db_text=''
dab_text=''
d_A=''
d_B=''
d_AB=''
s_AB=''
sab_text=''
network_text=''
gene_A_text=''
gene_B_text=''
d_b_compute=''
d_ab_compute=''
s_ab_compute=''
nodes_text2=''
Pvalue=''
paths_times=''
Reference_genome=''
Pvalue_size=''
Pvalue_text=''
s_AB_rand=''
picture=''
result_yuan={}
#********************************global tool3
built_in_network2=''
partial_display=''
file_output=''
gene_file3=''
gene_network_file3=''
seed_file=''
frequency=''
partial_number=''
seed_list=[]
random_walk_result={}
Temporary_text=''
# ************************ start
class Runthread(QtCore.QThread):
    def nodes_links(self):
        global G
        global gene_set1
        global gene_result2
        global genes_set
        global gene_result1
        global lcc_size
        global lcc_size_result
        global edge_number
        global mean_result
        global edges_result
        global mean_number
        global nodes_and_links
        for line in open(gene_network_file, 'r'):
            if line[0] == '#':
                continue
            line_data = line.strip().split('\t')
            node1 = line_data[0]
            node2 = line_data[1]
            G.add_edge(node1, node2)
        all_genes_in_network = set(G.nodes())
        tools.remove_self_links(G)
        gene_set_full=self.read_gene_list()
        gene_set1=gene_set_full & all_genes_in_network
        if len(gene_set_full) != len(gene_set1):
            gene_result2=("  ignoring %s genes that are not in the network\n  remaining number of genes: %s\n----------------------------------------"% (
                len(gene_set_full - all_genes_in_network),(len(gene_set1))))
        nodes_and_links = ("> done loading network:\n  network contains %s nodes and %s links" % (G.number_of_nodes(),
                                                                                                  G.number_of_edges()))
        #***************************************************read gene_file
        genes_set = set()
        for line in open(gene_file, 'r'):
            if line[0] == '#':
                continue
            line_data = line.strip().split('\t')
            gene = line_data[0]
            genes_set.add(gene)
        gene_result1 = ("> done reading genes:\n  %s genes found in %s" % (len(genes_set), gene_file))
    def lcc_size(self):
        global lcc_size
        g = nx.subgraph(G, gene_set1)
        if g.number_of_nodes() != 0:
            # get all components

            components = list(sorted(nx.connected_components(g), key=len, reverse=True))
            lcc_size=len(components[0])

        else:
            lcc_size=0
        global lcc_size_result
        lcc_size_result=("    > Largest subnetwork =   %s\n----------------------------------------" % lcc_size)
        return lcc_size
    def edges_compute(self):
        global edge_number
        g = nx.subgraph(G, gene_set1)
        edge_number=len(g.edges())
        global edges_result
        edges_result=("    > All edges = %s\n----------------------------------------" % edge_number)
    def mean_edges_compute(self):
        self.edges_compute()
        global mean_result
        global edge_number
        global gene_set1
        global mean_number
        g = nx.subgraph(G, gene_set1)
        edge_number = len(g.edges())
        mean_number= edge_number /len(gene_set1)
        mean_result=("    > Mean degree = %s\n----------------------------------------"%mean_number)
    def mean_shortest_distance_compute(self):
        global mean_shortest_distance_result
        global d_s
        d_s = tools.calc_single_set_distance(G, gene_set1)
        mean_shortest_distance_result = ("    > Mean shortest distance = %s\n----------------------------------------" % (d_s))
    def read_gene_list(self):
        global genes_set
        genes_set = set()
        for line in open(gene_file, 'r'):
            # lines starting with '#' will be ignored
            if line[0] == '#':
                continue
            # gene:
            line_data = line.strip().split('\t')
            gene = line_data[0]
            genes_set.add(gene)
        global gene_result1
        gene_result1=("> done reading genes:\n> %s genes found in %s"% (len(genes_set), gene_file))
        return genes_set
    def get_randon_mean_shortest_distance(self):
        global random_times
        global G
        global shortest_distance_rand
        global random_shorest_distance_result
        global result3
        global Pvalue_of_observed_mean_shortest_distance
        global random_Pvalue_observed_mean_shortest_distance_result
        all_genes = G.nodes()
        number_of_seed_genes = len(gene_set1 & set(all_genes))
        random_times = int(float(random_times))
        random_shorest_list=[]
        for i in range(0, random_times):
            random_seeds = set(random.sample(all_genes, number_of_seed_genes))
            d_s2 = tools.calc_single_set_distance(G,random_seeds)
            random_shorest_list.append(round(d_s2,3))
        shortest_distance_rand = np.mean(random_shorest_list)
        random_shorest_distance_result=("> Random expectation about the mean shortest distance :\n      the mean shortest distance[rand] = %s" %shortest_distance_rand)
        new_random_mean_shortest_list = []
        for i in range(0,len(random_shorest_list)):
            if random_shorest_list[i]<d_s:
                new_random_mean_shortest_list.append(random_shorest_list[i])
        Pvalue_of_observed_mean_shortest_distance = len(new_random_mean_shortest_list) / len(random_shorest_list)
        random_Pvalue_observed_mean_shortest_distance_result = ("> Random expectation about the mean shortest distance :\n      P-value of observed the mean shortest distance = %s\n------------------------------------------------------" % Pvalue_of_observed_mean_shortest_distance)

        def all_list(arr):
            result2 = {}
            for i in set(arr):
                result2[i] = arr.count(i)/len(random_shorest_list)
            return result2

        result3 = all_list(random_shorest_list)
        x = result3.keys()
        y = result3.values()
        plt.xlabel('Mean shortest distance')
        plt.ylabel('Frequency_percentage')
        plt.bar(x,y,width=0.005,edgecolor='black',linewidth=0.005)
        plt.title('The histogram of the Mean shortest distance-Frequency_percentage')
        plt.savefig('mean_shortest_distance_final.pdf')
        plt.close()
    def get_random_comparison(self):
        global G
        global gene_set1
        global random_times
        global lcc_size
        global Pvalue_of_observed_lcc_num
        global random_lcc_result
        global random_P_value_observed_lcc_result
        global random_P_value_observed_edges_result
        global edge_number
        global mean_edges
        global random_edges_result
        global step
        global random_random_mean_degree_result
        global random_Pvalue_random_mean_degree_result
        global degree_mean
        global Pvalue_of_observed_random_mean_edges
        lcc_size1=self.lcc_size()
        all_genes = G.nodes()
        number_of_seed_genes = len(gene_set1 & set(all_genes))
        l_list = []
        random_times=int(float(random_times))
        random_mean_edges_list=[]
        for i in range(0, random_times):
            rand_seeds = set(np.random.choice(all_genes, number_of_seed_genes, replace=False))
            g = nx.subgraph(G, rand_seeds)
            if g.number_of_nodes() != 0:
                components = list(sorted(nx.connected_components(g), key=len, reverse=True))
                lcc = len(components[0])
            else:
                lcc = 0
            l_list.append(lcc)
            random_seeds=set(random.sample(all_genes,number_of_seed_genes))
            g = nx.subgraph(G,random_seeds)
            edge_number1=len(g.edges())
            mean_edges_num=edge_number1/number_of_seed_genes
            random_mean_edges_list.append(round(mean_edges_num,2))
            edges_list.append(round(edge_number1,2))
        degree_mean = np.mean(random_mean_edges_list)

        def all_list(arr):
            result2 = {}
            for i in set(arr):
                result2[i] = arr.count(i)/len(l_list)
            return result2
        def edege_list(arr):
            result2={}
            for i in set(arr):
                result2[i] = arr.count(i)/len(edges_list)
            return result2
        def men_edge(arr):
            result2 = {}
            for i in set(arr):
                result2[i] = arr.count(i) / len(random_mean_edges_list)
            return result2
        global result2
        global result
        global result1
        result2=men_edge(random_mean_edges_list)
        result=all_list(l_list)
        result1=edege_list(edges_list)
        l_mean = np.mean(l_list)
        new_list=[]
        for i in l_list:
            if l_list[i]>lcc_size1:
                new_list.append(l_list[i])
                i+=1
        Pvalue_of_observed_lcc_num=(len(new_list)/len(l_list))
        new_edges_list=[]
        self.edges_compute()
        for i in edges_list:
            if edges_list[i]>edge_number:
                new_edges_list.append(edges_list[i])
                i+=1
        new_random_mean_edges_list=[]
        Pvalue_of_observed_edges_num=len(new_edges_list)/len(edges_list)
        edge_mean=np.mean(edges_list)
        self.mean_edges_compute()
        for i in range(0,len(random_mean_edges_list)-1):
            if random_mean_edges_list[i] > mean_number:
                new_random_mean_edges_list.append(random_mean_edges_list[i])
                i+=1
        Pvalue_of_observed_random_mean_edges =len(new_random_mean_edges_list)/len(random_mean_edges_list)
        random_random_mean_degree_result=("> Random expectation about the mean degree :\n      the mean degree[rand] = %s"%degree_mean)
        random_Pvalue_random_mean_degree_result=("> Random expectation about the mean degree :\n      P-value of observed the mean degree = %s\n--------------------------------------------"%Pvalue_of_observed_random_mean_edges)
        random_lcc_result=("> Random expectation about the largest subnetwork :\n      the largest subnetwork [rand] = %s"%l_mean)
        random_edges_result=("> Random expectation about the  number of all of the edges :\n      all edges [rand] = %s"%edge_mean)
        random_P_value_observed_lcc_result=("> Random expectation about the largest subnetwork:\n      P-value of observed the largest subnetwork's numbers = %s\n--------------------------------------------"%Pvalue_of_observed_lcc_num)
        random_P_value_observed_edges_result=("> Random expectation about the number of all of the edges:\n      P-value of observed all edges = %s\n-------------------------------------------"% Pvalue_of_observed_edges_num)
    def percentage_lcc(self):
        global result
        global lcc_size
        global result1
        x = result.keys()
        y = result.values()
        lcc=int(lcc_size)
        plt.xlabel('The largest subnetwork-Frequency_percentage')
        plt.ylabel('Frequency_percentage')
        plt.bar(x, y,edgecolor='black',linewidth=0.005)
        plt.title('The histogram of the largest subnetwork_percentage')
        plt.savefig('The_largest_subnetwork_final.pdf')
        plt.close()
    def percentage_mean_degree(self):
        global result2
        x=result2.keys()
        y=result2.values()
        plt.bar(x,y,width=0.01,edgecolor='black',linewidth=0.005)
        plt.xlabel('Mean degree')
        plt.ylabel('Frequency_percentage')
        plt.title('The histogram of the Mean degree-Frequency_percentage')
        plt.savefig('mean_degree_final.pdf')
        plt.close()
    def percentage_edges(self):

            x = result1.keys()
            y = result1.values()
            plt.xlabel('edges')
            plt.ylabel('Frequency_percentage')
            plt.bar(x, y,edgecolor='black',linewidth=0.005)
            plt.title('The histogram of the edges-Frequency_percentage')
            plt.savefig('edges_final.pdf')
            plt.close()
    def largest_subnetwork(self):
        g = nx.subgraph(G, gene_set1)
        all_edges=list(g.edges())
        number=len(all_edges)
        if g.number_of_nodes() != 0:
            # get all components
            components = list(sorted(nx.connected_components(g), key=len, reverse=True))
            lcc_gene = list(components[0])
            lcc_gene_set1=set()
            for i in range(0,len(lcc_gene)):
                lcc_gene_set1.add(lcc_gene[i])
            g1=nx.subgraph(G,lcc_gene_set1)
            lcc_gene_network=list(g1.edges())
            file = open('largest_subnetwork.txt', 'a')
            for i in range(0, len(lcc_gene_network)):
                print("%s\t%s" % (lcc_gene_network[i][0], lcc_gene_network[i][1]), file=file)
            file.close()
    def observed_network(self):
        g = nx.subgraph(G, gene_set1)
        largest_gene=list(g.edges())
        file = open('observed_network.txt', 'a')
        for i in range(0, len(largest_gene)):
            file = open('observed_network.txt', 'a')
            print("%s\t%s" % (largest_gene[i][0],largest_gene[i][1]),file=file)
        file.close()
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(767, 623)
        MainWindow.setStyleSheet("background-color:#D3E8E7;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 761, 561))
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.tab)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.groupBox = QtWidgets.QGroupBox(self.tab)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiLight")
        font.setPointSize(11)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.groupBox)
        self.textBrowser_2.setGeometry(QtCore.QRect(10, 20, 721, 491))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.gridLayout_2.addWidget(self.groupBox, 0, 0, 1, 1)
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")

        self.groupBox_2 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_2.setGeometry(QtCore.QRect(0, 0, 751, 531))
        self.groupBox_2.setStyleSheet("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox_2)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 50, 731, 101))
        self.groupBox_3.setObjectName("groupBox_3")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.groupBox_3)
        self.textBrowser_3.setGeometry(QtCore.QRect(10, 20, 601, 31))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.pushButton = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton.setGeometry(QtCore.QRect(630, 20, 91, 31))
        self.pushButton.setStyleSheet("background-color:pink")
        self.pushButton.setAutoDefault(False)
        self.pushButton.setDefault(False)
        self.pushButton.setFlat(False)
        self.pushButton.setObjectName("pushButton")
        self.checkBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.checkBox.setGeometry(QtCore.QRect(10, 60, 301, 31))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setBold(True)
        font.setWeight(75)
        self.checkBox.setFont(font)
        self.checkBox.setObjectName("checkBox")
        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_4.setGeometry(QtCore.QRect(560, 60, 161, 31))
        self.pushButton_4.setStyleSheet("background-color:pink")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_6 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_6.setGeometry(QtCore.QRect(390, 60, 151, 31))
        self.pushButton_6.setStyleSheet("background-color:pink")
        self.pushButton_6.setObjectName("pushButton_6")
        self.label = QtWidgets.QLabel(self.groupBox_2)
        self.label.setGeometry(QtCore.QRect(220, 20, 321, 23))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox_2)
        self.groupBox_4.setGeometry(QtCore.QRect(10, 160, 731, 61))
        self.groupBox_4.setObjectName("groupBox_4")
        self.textBrowser_4 = QtWidgets.QTextBrowser(self.groupBox_4)
        self.textBrowser_4.setGeometry(QtCore.QRect(10, 20, 601, 31))
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_2.setGeometry(QtCore.QRect(630, 20, 91, 31))
        self.pushButton_2.setStyleSheet("background-color:pink")
        self.pushButton_2.setObjectName("pushButton_2")
        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox_2)
        self.groupBox_6.setGeometry(QtCore.QRect(0, 220, 371, 321))
        self.groupBox_6.setObjectName("groupBox_6")
        self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox_6)
        self.groupBox_5.setGeometry(QtCore.QRect(5, 15, 361, 245))
        self.groupBox_5.setObjectName("groupBox_5")
        self.checkBox_2 = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_2.setGeometry(QtCore.QRect(10, 70, 175, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_2.setFont(font)
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_3.setGeometry(QtCore.QRect(10, 20, 200, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_3.setFont(font)
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_8 = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_8.setGeometry(QtCore.QRect(10, 45, 200, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_8.setFont(font)
        self.checkBox_8.setObjectName("checkBox_8")
        self.checkBox_9 = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_9.setGeometry(QtCore.QRect(10, 95, 200, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_9.setFont(font)
        self.checkBox_9.setObjectName("checkBox_9")
        self.groupBox_7 = QtWidgets.QGroupBox(self.groupBox_6)
        self.groupBox_7.setGeometry(QtCore.QRect(5, 260, 361, 51))
        self.groupBox_7.setObjectName("groupBox_7")
        self.checkBox_observed_network = QtWidgets.QCheckBox(self.groupBox_7)
        self.checkBox_observed_network.setGeometry(QtCore.QRect(10,20,195,22))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_observed_network.setFont(font)
        self.checkBox_observed_network.setObjectName("checkBox_observed_network")
        self.checkBox_largest_subnetwork=QtWidgets.QCheckBox(self.groupBox_7)
        self.checkBox_largest_subnetwork.setGeometry(QtCore.QRect(185,20,160,22))
        self.checkBox_largest_subnetwork.setFont(font)
        self.checkBox_largest_subnetwork.setObjectName("checkBox_largest_subnetwork")
        self.checkBox_4 = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_4.setGeometry(QtCore.QRect(215, 70, 100, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_4.setFont(font)
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_5 = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_5.setGeometry(QtCore.QRect(215, 20, 100, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_5.setFont(font)
        self.checkBox_5.setObjectName("checkBox_5")
        self.checkBox_mean_degree=QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_mean_degree.setGeometry(QtCore.QRect(215,45,100,21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_mean_degree.setFont(font)
        self.checkBox_mean_degree.setObjectName("checkBox_mean_degree")
        self.checkBox_mean_shorest_distance = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_mean_shorest_distance.setGeometry(QtCore.QRect(215, 95, 100, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_mean_shorest_distance.setFont(font)
        self.checkBox_mean_shorest_distance.setObjectName("checkBox_mean_shorest_distance")
        self.checkBox_closeness_centrality = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_closeness_centrality.setGeometry(QtCore.QRect(10,120,200,21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_closeness_centrality.setFont(font)
        self.checkBox_closeness_centrality.setObjectName("checkBox_closeness_centrality")
        self.checkBox_closeness_centrality_random = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_closeness_centrality_random.setGeometry(QtCore.QRect(215,120,100,21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_closeness_centrality_random.setFont(font)
        self.checkBox_closeness_centrality_random.setObjectName("checkBox_closeness_centrality_random")
        self.checkBox_Clustering_coefficient = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_Clustering_coefficient.setGeometry(QtCore.QRect(10,150,200,21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_Clustering_coefficient.setFont(font)
        self.checkBox_Clustering_coefficient.setObjectName("checkBox_Clustering_coefficient")
        self.checkBox_Clustering_coefficient_random = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_Clustering_coefficient_random.setGeometry(QtCore.QRect(215,150,100,21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_Clustering_coefficient_random.setFont(font)
        self.checkBox_Clustering_coefficient_random.setObjectName("checkBox_Clustering_coefficient_random")
        self.checkBox_Betweenness_centrality = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_Betweenness_centrality.setGeometry(QtCore.QRect(10,175,200,21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_Betweenness_centrality.setFont(font)
        self.checkBox_Betweenness_centrality.setObjectName("checkBox_Betweenness_centrality")
        self.checkBox_Betweenness_centrality_random = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_Betweenness_centrality_random.setGeometry(QtCore.QRect(215,175,100,21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_Betweenness_centrality_random.setFont(font)
        self.checkBox_Betweenness_centrality_random.setObjectName("checkBox_Betweenness_centrality_random")
        self.comboBox = QtWidgets.QComboBox(self.groupBox_5)
        self.comboBox.setGeometry(QtCore.QRect(125, 210, 119, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_5.setGeometry(QtCore.QRect(380, 440, 361, 81))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(24)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setStyleSheet("background-color:pink")
        self.pushButton_5.setObjectName("pushButton_5")
        self.groupBox_9 = QtWidgets.QGroupBox(self.groupBox_2)
        self.groupBox_9.setGeometry(QtCore.QRect(370, 220, 371, 211))
        self.groupBox_9.setObjectName("groupBox_9")
        self.textBrowser_5 = QtWidgets.QTextBrowser(self.groupBox_9)
        self.textBrowser_5.setGeometry(QtCore.QRect(10, 20, 351, 181))
        self.textBrowser_5.setObjectName("textBrowser_5")
        self.tabWidget.addTab(self.tab_2, "")
        self.pushButton1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton1.setGeometry(QtCore.QRect(0, 570, 111, 23))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiLight")
        font.setPointSize(11)
        self.pushButton1.setFont(font)
        self.pushButton1.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.pushButton1.setStyleSheet("background-color:pink;")
        self.pushButton1.setObjectName("pushButton1")
        self.pushButton_21 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_21.setGeometry(QtCore.QRect(130, 570, 111, 23))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiLight")
        font.setPointSize(11)
        self.pushButton_21.setFont(font)
        self.pushButton_21.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.pushButton_21.setStyleSheet("background-color:pink;")
        self.pushButton_21.setObjectName("pushButton_21")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(250, 570, 401, 21))
        self.textBrowser.setObjectName("textBrowser")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(670, 570, 75, 23))
        self.pushButton_3.setStyleSheet("background-color:pink;")
        self.pushButton_3.setObjectName("pushButton_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 767, 23))
        self.menubar.setObjectName("menubar")
        self.menuaaa = QtWidgets.QMenu(self.menubar)
        self.menuaaa.setObjectName("menuaaa")
        self.menuaaa.setStyleSheet("background-color:#B3D1F0;")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        self.menuAbout.setStyleSheet("background-color:#B3D1F0;")
        MainWindow.setMenuBar(self.menubar)
        self.actionabout1 = QtWidgets.QAction(MainWindow)
        self.actionabout1.setObjectName("actionabout")
        self.actionabout = QtWidgets.QAction(MainWindow)
        self.actionabout.setObjectName("actionabout")
        self.actionLcc_sizes = QtWidgets.QAction(MainWindow)
        self.actionLcc_sizes.setObjectName("actionLcc_sizes")
        self.action_window3=QtWidgets.QAction(MainWindow)
        self.action_window3.setObjectName("action_window3")
        self.actionedges_sizes = QtWidgets.QAction(MainWindow)
        self.game_tip =QtWidgets.QAction(MainWindow)
        self.game_tip.setObjectName("game_tip")
        self.actionedges_sizes.setObjectName("actionedges_sizes")
        self.actionMaximum_connection_value_analysis = QtWidgets.QAction(MainWindow)
        self.actionMaximum_connection_value_analysis.setObjectName("actionMaximum_connection_value_analysis")
        self.menuaaa.addAction(self.actionLcc_sizes)
        self.menuaaa.addSeparator()
        self.menuaaa.addAction(self.actionMaximum_connection_value_analysis)
        self.menuaaa.addSeparator()
        self.menuaaa.addAction(self.action_window3)
        self.menubar.addAction(self.menuaaa.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        self.menuAbout.addAction(self.actionabout)
        self.menuAbout.addAction(self.actionabout1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Network calculator"))
        self.groupBox.setTitle(_translate("MainWindow", "Wisdom"))
        self.textBrowser_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:22pt; font-weight:600;\">Our destiny offers not the cup of despair, but the chalice of opportunity. So let us seize it, not in fear, but in gladness.--R.M. Nixon</span></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "About Tools"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Network Localization Analysis"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Importing total network file"))
        self.pushButton.setText(_translate("MainWindow", "..."))
        self.pushButton.clicked.connect(self.import_gene_network_file)
        self.checkBox.setText(_translate("MainWindow", "Using built-in network file"))
        self.checkBox.stateChanged.connect(self.choose)
        self.pushButton_4.setText(_translate("MainWindow", "Import"))
        self.pushButton_4.clicked.connect(self.import_built_in_gene_network)
        self.pushButton_6.setText(_translate("MainWindow", "Clear"))
        self.pushButton_6.clicked.connect(self.clear_path)
        self.label.setText(_translate("MainWindow", "Network Localization Analysis"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Importing gene set"))
        self.pushButton_2.setText(_translate("MainWindow", "..."))
        self.pushButton_2.clicked.connect(self.import_gene_file)
        self.groupBox_6.setTitle(_translate("MainWindow", "Calculation options"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Network Parameters and Randomly Sampling"))
        self.checkBox_2.setText(_translate("MainWindow", "Largest subnetwork"))
        self.checkBox_2.stateChanged.connect(self.choose)
        self.checkBox_3.setText(_translate("MainWindow", "All edges"))
        self.checkBox_3.stateChanged.connect(self.choose)
        self.checkBox_8.setText(_translate("MainWindow", "Mean degree"))
        self.checkBox_8.stateChanged.connect(self.choose)
        self.checkBox_9.setText(_translate("MainWindow", "Mean shortest distance"))
        self.checkBox_9.stateChanged.connect(self.choose)
        self.groupBox_7.setTitle(_translate("MainWindow", "Exporting Network Files"))
        self.checkBox_4.setText(_translate("MainWindow", "Yes"))
        self.checkBox_4.stateChanged.connect(self.choose)
        self.checkBox_5.setText(_translate("MainWindow", "Yes"))
        self.checkBox_5.stateChanged.connect(self.choose)
        self.checkBox_mean_shorest_distance.setText(_translate("MainWindow","Yes"))
        self.checkBox_mean_shorest_distance.stateChanged.connect(self.choose)
        self.checkBox_observed_network.setText(_translate("MainWindow","Observed Network"))
        self.checkBox_observed_network.stateChanged.connect(self.choose)
        self.checkBox_largest_subnetwork.setText(_translate("MainWindow","Largest subnetwork"))
        self.checkBox_largest_subnetwork.stateChanged.connect(self.choose)
        self.comboBox.setItemText(0, _translate("MainWindow", "choose the times"))
        self.comboBox.setItemText(1, _translate("MainWindow", "1000"))
        self.comboBox.setItemText(2, _translate("MainWindow", "2000"))
        self.comboBox.setItemText(3, _translate("MainWindow", "3000"))
        self.comboBox.setItemText(4, _translate("MainWindow", "4000"))
        self.comboBox.setItemText(5, _translate("MainWindow", "5000"))
        self.comboBox.setItemText(6, _translate("MainWindow", "6000"))
        self.comboBox.setItemText(7, _translate("MainWindow", "7000"))
        self.comboBox.setItemText(8, _translate("MainWindow", "8000"))
        self.comboBox.setItemText(9, _translate("MainWindow", "9000"))
        self.comboBox.setItemText(10, _translate("MainWindow", "10000"))
        self.checkBox_mean_degree.setText(_translate("MainWindow","Yes"))
        self.checkBox_closeness_centrality.setText(_translate("MainWindow","closeness centrality"))
        self.checkBox_closeness_centrality.stateChanged.connect(self.choose)
        self.checkBox_closeness_centrality_random.setText(_translate("MainWindow","Yes"))
        self.checkBox_closeness_centrality_random.stateChanged.connect(self.choose)
        self.checkBox_Clustering_coefficient.setText(_translate("MainWindow","Clustering coefficient"))
        self.checkBox_Clustering_coefficient.stateChanged.connect(self.choose)
        self.checkBox_Clustering_coefficient_random.setText(_translate("MainWindow","Yes"))
        self.checkBox_Clustering_coefficient_random.stateChanged.connect(self.choose)
        self.checkBox_Betweenness_centrality.setText(_translate("MainWindow","Betweenness centrality"))
        self.checkBox_Betweenness_centrality.stateChanged.connect(self.choose)
        self.checkBox_Betweenness_centrality_random.setText(_translate("MainWindow","Yes"))
        self.checkBox_Betweenness_centrality_random.stateChanged.connect(self.choose)
        self.checkBox_mean_degree.stateChanged.connect(self.choose)
        self.comboBox.currentIndexChanged.connect(self.print_value)
        self.pushButton_5.setText(_translate("MainWindow", "START"))
        self.pushButton_5.clicked.connect(self.start)
        self.groupBox_9.setTitle(_translate("MainWindow", "Result"))
        self.textBrowser_5.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Main Window"))
        self.pushButton1.setText(_translate("MainWindow", "Version"))
        self.pushButton1.clicked.connect(self.messagebox)
        self.pushButton_21.setText(_translate("MainWindow", "Citation"))
        self.pushButton_21.clicked.connect(self.citation)
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If you found this tool\'s useful,let me know. Send me an email  -- Lei Gao( gaolei_tsmu@163.com )</p></body></html>"))
        self.pushButton_3.setText(_translate("MainWindow", "Quit"))
        self.pushButton_3.clicked.connect(quit)
        self.menuaaa.setTitle(_translate("MainWindow", "Tools"))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.actionabout.setText(_translate("MainWindow","About calculator"))
        self.actionabout.triggered.connect(self.abouttip)
        self.game_tip.setText(_translate("MainWindow","mine-sweeping"))
        self.game_tip.triggered.connect(self.game_window)
        self.actionLcc_sizes.setText(_translate("MainWindow", "Network Localization Analysis(Main Window)"))
        self.action_window3.setText(_translate("MainWindow","Random Walk with Restart"))
        self.actionedges_sizes.setText(_translate("MainWindow", "edges_size"))
        self.actionMaximum_connection_value_analysis.setText(_translate("MainWindow", "Network overlap analysis"))
        self.actionabout1.setText(_translate("MainWindow","Official website"))
        self.actionabout1.triggered.connect(self.citation)
    def abouttip(self):
        about_box=QMessageBox(QMessageBox.about(self,"Tip","The About file has been saved in the current directory "))
    def import_gene_network_file(self):
        global G
        global gene_network_file
        fileName1, filetype = QFileDialog.getOpenFileName(self,"选取文件", "./",
                                                          "All Files (*);;Excel Files (*.xls)")  # 设置文件扩展名过滤,注意用双分号间隔
        gene_network_file = fileName1
        self.textBrowser_3.setText(fileName1)
        time.sleep(0.2)
    def import_built_in_gene_network(self):
        global gene_network_file
        if built_in_network =='True':
            file_name='all_PPIs.txt'
            gene_network_file = file_name
            self.textBrowser_3.setText(gene_network_file)
    def clear_path(self):
        global gene_network_file
        gene_network_file=''
        self.textBrowser_3.setText(gene_network_file)
    def import_gene_file(self):
        global gene_file
        fileName2, filetype = QFileDialog.getOpenFileName(self, "选取文件", "./",
                                                          "All Files (*);;Excel Files (*.xls)")
        self.textBrowser_4.setText(fileName2)
        gene_file=fileName2
    def choose(self):
        global nodes
        global links
        global gene_lcc_size
        global gene_edges
        global mean_edges
        global mean_shortest_distance
        global random_lcc_size
        global Pvalue_of_observed_lcc
        global random_edges
        global Pvalue_of_observed_edges
        global built_in_network
        global random_mean_degree
        global random_mean_shorest_distance
        global checkBox_observed_network
        global checkBox_largest_subnetwork
        global closeness_centrality
        global clustering_coefficient
        global betweenness_centrality
        global random_closeness_centrality
        global random_clustering_coefficient
        global random_betweenness_centrality
        closeness_centrality = 'True' if self.checkBox_closeness_centrality.isChecked() else 'False'
        clustering_coefficient = 'True' if self.checkBox_Clustering_coefficient.isChecked() else 'False'
        betweenness_centrality = 'True' if self.checkBox_Betweenness_centrality.isChecked() else 'False'
        random_closeness_centrality = 'True' if self.checkBox_closeness_centrality_random.isChecked() else 'False'
        random_clustering_coefficient = 'True' if self.checkBox_Clustering_coefficient_random.isChecked() else 'False'
        random_betweenness_centrality = 'True' if self.checkBox_Betweenness_centrality_random.isChecked() else 'False'
        checkBox_largest_subnetwork = 'True' if self.checkBox_largest_subnetwork.isChecked() else 'False'
        checkBox_observed_network = 'True' if self.checkBox_observed_network.isChecked() else 'False'
        random_mean_shorest_distance = 'True' if self.checkBox_mean_shorest_distance.isChecked() else 'False'
        random_mean_degree = 'True' if self.checkBox_mean_degree.isChecked() else 'False'
        built_in_network='True' if self.checkBox.isChecked() else 'False'
        gene_lcc_size='True'if self.checkBox_2.isChecked() else 'False'
        gene_edges='True'if self.checkBox_3.isChecked() else'False'
        mean_edges='True'if self.checkBox_8.isChecked() else'False'
        mean_shortest_distance='True'if self.checkBox_9.isChecked() else 'False'
        random_lcc_size='True'if self.checkBox_4.isChecked() else 'False'
        random_edges='True' if self.checkBox_5.isChecked() else 'False'
    def print_value(self,i):
        global random_times
        random_times=self.comboBox.currentText()
    def start(self):
        self.thread = Runthread()
        self.textBrowser_5.setText("The calculation results are as follows:")
        self.thread.nodes_links()
        self.textBrowser_5.append(nodes_and_links)
        self.textBrowser_5.append(gene_result1)
        self.textBrowser_5.append(gene_result2)
        if gene_lcc_size=='True'or  gene_edges == 'True' or mean_edges == 'True'or mean_shortest_distance=='True' :
            if gene_lcc_size=='True':
                self.thread.lcc_size()
                self.textBrowser_5.append(lcc_size_result)
            if gene_edges == 'True':
                self.thread.edges_compute()
                self.textBrowser_5.append(edges_result)
            if mean_edges == 'True':
                self.thread.mean_edges_compute()
                self.textBrowser_5.append(mean_result)
            if mean_shortest_distance=='True':
                self.thread.mean_shortest_distance_compute()
                self.textBrowser_5.append(mean_shortest_distance_result)
        if random_lcc_size=='True'  or random_edges == 'True' or random_mean_degree == 'True' or random_mean_degree == 'True'  or random_mean_shorest_distance=='True':
            self.thread.get_random_comparison()
            if random_lcc_size=='True':
                self.textBrowser_5.append(random_lcc_result)
                self.thread.percentage_lcc()
                self.textBrowser_5.append(random_P_value_observed_lcc_result)
            if random_edges=='True':
                self.textBrowser_5.append(random_edges_result)
                self.thread.percentage_edges()
                self.textBrowser_5.append(random_P_value_observed_edges_result)
            if random_mean_degree == 'True':
                self.textBrowser_5.append(random_random_mean_degree_result)
                self.thread.percentage_mean_degree()
                self.textBrowser_5.append(random_Pvalue_random_mean_degree_result)
        if random_mean_shorest_distance == 'True':
            self.thread.get_randon_mean_shortest_distance()
            self.textBrowser_5.append(random_shorest_distance_result)
            self.textBrowser_5.append(random_Pvalue_observed_mean_shortest_distance_result)
        if checkBox_observed_network =='True' or checkBox_largest_subnetwork =='True':
            if checkBox_observed_network == 'True':
                self.thread.observed_network()
            if checkBox_largest_subnetwork == 'True':
                self.thread.largest_subnetwork()
        if closeness_centrality =='True':
            closeness_centrality_result = tools1.get_closeness_centrality(gene_network_file, gene_file)
            closeness_centrality_result1=("closeness centrality：%s" % closeness_centrality_result)
            self.textBrowser_5.append(closeness_centrality_result1)
        if random_closeness_centrality =='True':
            rand_closeness_centrality_result,Pvalue = tools1.get_random_closeness_centrality(gene_network_file,random_times,gene_file)
            rand_closeness_centrality_result1=("closeness centrality[rand] = %s"%rand_closeness_centrality_result)
            Pvalue_result = ("P-value of closeness centrality = %s" %Pvalue)
            self.textBrowser_5.append(rand_closeness_centrality_result1)
            self.textBrowser_5.append(Pvalue_result)
        if clustering_coefficient == 'True':
            clustering_coefficient_result = tools1.get_Clustering_coefficient(gene_network_file,gene_file)
            clustering_coefficient_result=("clustering coefficient：%s" % clustering_coefficient_result)
            self.textBrowser_5.append(clustering_coefficient_result)
        if random_clustering_coefficient == 'True':
            rand_random_clustering_coefficient_result,Pvalue = tools1.get_random_clustering_coefficient(gene_network_file,gene_file,random_times)
            rand_random_clustering_coefficient_result1 = ("clustering coefficient[rand] = %s" % rand_random_clustering_coefficient_result)
            Pvalue_result = ("P-value of clustering coefficient = %s" % Pvalue)
            self.textBrowser_5.append(rand_random_clustering_coefficient_result1)
            self.textBrowser_5.append(Pvalue_result)
        if betweenness_centrality == 'True':
            betweenness_centrality_result = tools1.get_betweenness_centrality(gene_network_file,gene_file)
            betweenness_centrality_result1 = ("betweenness centrality：%s" % betweenness_centrality_result)
            self.textBrowser_5.append(betweenness_centrality_result1)
        if random_betweenness_centrality == 'True':
            rand_betweenness_centrality_result,Pvalue = tools1.get_random_betweenness_centrality(gene_network_file,gene_file,random_times)
            rand_betweenness_centrality_result1 = (
                        "betweenness centrality[rand] = %s" % rand_betweenness_centrality_result)
            Pvalue_result = ("P-value of betweenness centrality = %s" % Pvalue)
            self.textBrowser_5.append(rand_betweenness_centrality_result1)
            self.textBrowser_5.append(Pvalue_result)
    def messagebox(self):
        msg_box=QMessageBox(QMessageBox.Warning,"Unable to connect server","Please check the updates mannually")
        msg_box.exec_()
    def citation(self):
        url = 'http://123.128.12.86:8090/'
        webbrowser.open(url)
    def game_window(self):
        msg_box = QMessageBox(QMessageBox.Warning, "Stay Tuned", "Sorry, the game is under development,please stay tuned for\nversion 2.1 of Network Calculator.")
        msg_box.exec_()
class Ui_MainWindow1(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(753, 632)
        MainWindow.setStyleSheet("background-color:#D3E8E7;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 751, 571))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.groupBox_2 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_2.setGeometry(QtCore.QRect(0, 0, 741, 541))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.groupBox_2)
        self.textBrowser_3.setGeometry(QtCore.QRect(0, 20, 741, 511))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.groupBox = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox.setGeometry(QtCore.QRect(0, 0, 741, 551))
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(240, 20, 301, 26))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_3.setGeometry(QtCore.QRect(0, 60, 741, 101))
        self.groupBox_3.setObjectName("groupBox_3")
        self.textBrowser = QtWidgets.QTextBrowser(self.groupBox_3)
        self.textBrowser.setGeometry(QtCore.QRect(10, 20, 611, 31))
        self.textBrowser.setObjectName("textBrowser")
        self.toolButton = QtWidgets.QToolButton(self.groupBox_3)
        self.toolButton.setGeometry(QtCore.QRect(630, 20, 81, 31))
        self.toolButton.setStyleSheet("background-color:pink")
        self.toolButton.setObjectName("toolButton")
        self.checkBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.checkBox.setGeometry(QtCore.QRect(10, 60, 301, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox.setFont(font)
        self.checkBox.setObjectName("checkBox")
        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_4.setGeometry(QtCore.QRect(430, 60, 121, 31))
        self.pushButton_4.setStyleSheet("background-color:pink")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_5.setGeometry(QtCore.QRect(590, 60, 121, 31))
        self.pushButton_5.setStyleSheet("background-color:pink")
        self.pushButton_5.setObjectName("pushButton_5")
        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_4.setGeometry(QtCore.QRect(0, 160, 741, 71))
        self.groupBox_4.setObjectName("groupBox_4")
        self.textBrowser_4 = QtWidgets.QTextBrowser(self.groupBox_4)
        self.textBrowser_4.setGeometry(QtCore.QRect(10, 20, 611, 31))
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.toolButton_2 = QtWidgets.QToolButton(self.groupBox_4)
        self.toolButton_2.setGeometry(QtCore.QRect(630, 20, 81, 31))
        self.toolButton_2.setStyleSheet("background-color:pink")
        self.toolButton_2.setObjectName("toolButton_2")
        self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_5.setGeometry(QtCore.QRect(0, 230, 741, 71))
        self.groupBox_5.setObjectName("groupBox_5")
        self.textBrowser_5 = QtWidgets.QTextBrowser(self.groupBox_5)
        self.textBrowser_5.setGeometry(QtCore.QRect(10, 20, 611, 31))
        self.textBrowser_5.setObjectName("textBrowser_5")
        self.toolButton_3 = QtWidgets.QToolButton(self.groupBox_5)
        self.toolButton_3.setGeometry(QtCore.QRect(630, 20, 81, 31))
        self.toolButton_3.setStyleSheet("background-color:pink")
        self.toolButton_3.setObjectName("toolButton_3")
        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_6.setGeometry(QtCore.QRect(0, 300, 381, 251))
        self.groupBox_6.setObjectName("groupBox_6")
        self.groupBox_7 = QtWidgets.QGroupBox(self.groupBox_6)
        self.groupBox_7.setGeometry(QtCore.QRect(0, 15, 371, 51))
        self.groupBox_7.setObjectName("groupBox_7")
        self.checkBox_2 = QtWidgets.QCheckBox(self.groupBox_7)
        self.checkBox_2.setGeometry(QtCore.QRect(20, 20, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        self.checkBox_2.setFont(font)
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(self.groupBox_7)
        self.checkBox_3.setGeometry(QtCore.QRect(110, 20, 51, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        self.checkBox_3.setFont(font)
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_7 = QtWidgets.QCheckBox(self.groupBox_7)
        self.checkBox_7.setGeometry(QtCore.QRect(200, 20, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        self.checkBox_7.setFont(font)
        self.checkBox_7.setObjectName("checkBox_7")
        self.checkBox_5 = QtWidgets.QCheckBox(self.groupBox_7)
        self.checkBox_5.setGeometry(QtCore.QRect(290, 20, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        self.checkBox_5.setFont(font)
        self.checkBox_5.setObjectName("checkBox_5")
        self.groupBox_10 = QtWidgets.QGroupBox(self.groupBox_6)
        self.groupBox_10.setGeometry(QtCore.QRect(0, 70, 371, 101))
        self.groupBox_10.setObjectName("groupBox_10")
        self.comboBox = QtWidgets.QComboBox(self.groupBox_10)
        self.comboBox.setGeometry(QtCore.QRect(248, 25, 121, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.checkBox_4 = QtWidgets.QCheckBox(self.groupBox_10)
        self.checkBox_4.setGeometry(QtCore.QRect(15, 25, 221, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(10)
        self.checkBox_4.setFont(font)
        self.checkBox_4.setObjectName("checkBox_4")

        self.comboBox_9=QtWidgets.QCheckBox(self.groupBox_10)
        self.comboBox_9.setGeometry(QtCore.QRect(15,60,300,22))
        self.comboBox_9.setFont(font)
        self.pushButton_6 = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_6.setGeometry(QtCore.QRect(10, 180, 271, 61))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setStyleSheet("background-color:pink")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_7.setGeometry(QtCore.QRect(290, 180, 75, 61))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setStyleSheet("background-color:pink")
        self.pushButton_7.setObjectName("pushButton_7")
        self.groupBox_8 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_8.setGeometry(QtCore.QRect(380, 300, 361, 251))
        self.groupBox_8.setObjectName("groupBox_8")
        self.textBrowser_6 = QtWidgets.QTextBrowser(self.groupBox_8)
        self.textBrowser_6.setGeometry(QtCore.QRect(10, 20, 341, 221))
        self.textBrowser_6.setObjectName("textBrowser_6")
        self.tabWidget.addTab(self.tab_2, "")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(230, 580, 411, 21))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 580, 91, 23))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color:pink;")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(120, 580, 91, 23))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(12)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("background-color:pink;")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(660, 580, 75, 23))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(12)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("background-color:pink;")
        self.pushButton_3.setObjectName("pushButton_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 753, 23))
        self.menubar.setObjectName("menubar")
        self.menuGene_network = QtWidgets.QMenu(self.menubar)
        self.menuGene_network.setObjectName("menuGene_network")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        self.game_tip = QtWidgets.QAction(MainWindow)
        self.game_tip.setObjectName("game_tip")
        MainWindow.setMenuBar(self.menubar)
        self.actionGene_network_connect = QtWidgets.QAction(MainWindow)
        self.actionGene_network_connect.setObjectName("actionGene_network_connect")
        self.actionMaxium = QtWidgets.QAction(MainWindow)
        self.actionMaxium.setObjectName("actionMaxium")
        self.actionwindow3 = QtWidgets.QAction(MainWindow)
        self.actionwindow3.setObjectName("actionwindow3")
        self.menuGene_network.addAction(self.actionGene_network_connect)
        self.menuGene_network.addSeparator()
        self.menuGene_network.addAction(self.actionMaxium)
        self.menuGene_network.addSeparator()
        self.menuGene_network.addAction(self.actionwindow3)
        self.menubar.addAction(self.menuGene_network.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())
        self.actionabout1 = QtWidgets.QAction(MainWindow)
        self.actionabout1.setObjectName("actionabout")
        self.actionabout = QtWidgets.QAction(MainWindow)
        self.actionabout.setObjectName("actionabout")
        self.actionLcc_sizes = QtWidgets.QAction(MainWindow)
        self.menuAbout.addAction(self.actionabout)
        self.menuAbout.addAction(self.actionabout1)
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Network Calculator"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Wisdom"))
        self.textBrowser_3.setHtml(_translate("MainWindow",
                                              "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                              "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                              "p, li { white-space: pre-wrap; }\n"
                                              "</style></head><body style=\" font-family:\'Bahnschrift\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
                                              "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'SimSun\'; font-size:22pt; font-weight:600;\">Do not, for one repulse, forgo the purpose that you resolved to effort.</span></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "About Tools"))
        self.groupBox.setTitle(_translate("MainWindow", "Network overlap analysis"))
        self.label.setText(_translate("MainWindow", "Network overlap analysis"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Importing total network file"))
        self.toolButton.setText(_translate("MainWindow", "..."))
        self.toolButton.clicked.connect(self.read_network)
        self.checkBox.setText(_translate("MainWindow", "Using built-in network file"))
        self.checkBox.stateChanged.connect(self.check)
        self.pushButton_4.setText(_translate("MainWindow", "Clear"))
        self.pushButton_4.clicked.connect(self.clear)
        self.pushButton_5.setText(_translate("MainWindow", "Import"))
        self.pushButton_5.clicked.connect(self.import_built_in_network)
        self.groupBox_4.setTitle(_translate("MainWindow", "Gene set A"))
        self.toolButton_2.setText(_translate("MainWindow", "..."))
        self.toolButton_2.clicked.connect(self.import_gene_A)
        self.groupBox_5.setTitle(_translate("MainWindow", "Gene set B"))
        self.toolButton_3.setText(_translate("MainWindow", "..."))
        self.toolButton_3.clicked.connect(self.import_gene_B)
        self.groupBox_6.setTitle(_translate("MainWindow", "Options"))
        self.groupBox_7.setTitle(_translate("MainWindow", "Network Parameters"))
        self.checkBox_2.setText(_translate("MainWindow", "d_A"))
        self.checkBox_2.stateChanged.connect(self.check)
        self.checkBox_3.setText(_translate("MainWindow", "d_B"))
        self.checkBox_3.stateChanged.connect(self.check)
        self.checkBox_7.setText(_translate("MainWindow", "d_AB"))
        self.checkBox_7.stateChanged.connect(self.check)
        self.checkBox_5.setText(_translate("MainWindow", "s_AB"))
        self.checkBox_5.stateChanged.connect(self.check)
        self.groupBox_10.setTitle(_translate("MainWindow", "Random Sampling"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Choose times"))
        self.comboBox.currentIndexChanged.connect(self.times)
        self.comboBox.setItemText(1, _translate("MainWindow", "1000"))
        self.comboBox.setItemText(2, _translate("MainWindow", "2000"))
        self.comboBox.setItemText(3, _translate("MainWindow", "3000"))
        self.comboBox.setItemText(4, _translate("MainWindow", "4000"))
        self.comboBox.setItemText(5, _translate("MainWindow", "5000"))
        self.comboBox.setItemText(6, _translate("MainWindow", "6000"))
        self.comboBox.setItemText(7, _translate("MainWindow", "7000"))
        self.comboBox.setItemText(8, _translate("MainWindow", "8000"))
        self.comboBox.setItemText(9, _translate("MainWindow", "9000"))
        self.comboBox.setItemText(10, _translate("MainWindow", "10000"))
        self.checkBox_4.setText(_translate("MainWindow", "Significance of observed S_AB"))
        self.checkBox_4.stateChanged.connect(self.check)
        self.comboBox_9.setText(_translate("MainWindow","Exporting distribution of random sampling"))
        self.comboBox_9.stateChanged.connect(self.check)
        self.pushButton_6.setText(_translate("MainWindow", "START"))
        self.pushButton_6.clicked.connect(self.start)
        self.pushButton_7.setText(_translate("MainWindow", "Tip"))
        self.pushButton_7.clicked.connect(self.tip)
        self.groupBox_8.setTitle(_translate("MainWindow", "Result"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Main Window"))
        self.textBrowser_2.setHtml(_translate("MainWindow",
                                              "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                              "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                              "p, li { white-space: pre-wrap; }\n"
                                              "</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
                                              "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If you found this tool\'s useful,let me know. Send me an email . -- Lei Gao( gaolei_tsmu@163.com )</p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Version"))
        self.pushButton.clicked.connect(self.messagebox)
        self.pushButton_2.setText(_translate("MainWindow", "Citation"))
        self.pushButton_2.clicked.connect(self.citation)
        self.pushButton_3.setText(_translate("MainWindow", "Quit"))
        self.pushButton_3.clicked.connect(quit)
        self.menuGene_network.setTitle(_translate("MainWindow", "Tools"))
        self.game_tip.setText(_translate("MainWindow","mine-sweeping"))
        self.game_tip.triggered.connect(self.game_window)
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.actionGene_network_connect.setText(_translate("MainWindow", "Network Localization Analysis"))
        self.actionMaxium.setText(_translate("MainWindow", "Network overlap analysis(Main Window)"))
        self.actionwindow3.setText(_translate("MainWindow","Random Walk with Restart"))
        self.actionabout.setText(_translate("MainWindow", "About calculator"))
        self.actionabout.triggered.connect(self.abouttip)
        self.actionabout1.setText(_translate("MainWindow","Official website"))
        self.actionabout1.triggered.connect(self.citation)
    def abouttip(self):
        about_box=QMessageBox(QMessageBox.about(self,"Tip","The About file has been saved in the current directory "))
    def tip(self):
        msg_box = QMessageBox(QMessageBox.Warning, "Tip", "Please look for the document named \"Tip\" in the current directory")
        msg_box.exec_()
    def read_network(self):
        global G1
        global gene_network_file2
        fileName2, filetype = QFileDialog.getOpenFileName(self, "选取文件", "./",
                                                          "All Files (*);;Excel Files (*.xls)")
        gene_network_file2=fileName2
        self.textBrowser.setText(fileName2)
    def import_built_in_network(self):
        global gene_network_file2
        if built_in_network1 =='True':
            gene_network_file2='all_PPIs.txt'
            self.textBrowser.setText(gene_network_file2)
    def import_gene_A(self):
        global gene_file2A
        fileName, filetype = QFileDialog.getOpenFileName(self, "选取文件", "./",
                                                          "All Files (*);;Excel Files (*.xls)")
        gene_file2A=fileName
        self.textBrowser_4.setText(gene_file2A)
    def import_gene_B(self):
        global gene_file2B
        fileName, filetype = QFileDialog.getOpenFileName(self, "选取文件", "./",
                                                         "All Files (*);;Excel Files (*.xls)")
        gene_file2B=fileName
        self.textBrowser_5.setText(gene_file2B)
    def clear(self):
        global gene_network_file2
        gene_network_file2=''
        self.textBrowser.setText(gene_network_file2)
    def nodes_and_links(self):
        global G1
        global all_genes_in_network2
        global genes_A_full
        global genes_A
        global nodes_text
        global genes_B_full
        global genes_B
        global network_text
        global gene_A_text
        global gene_B_text
        global nodes_text2
        G1=tools.read_network(gene_network_file2)
        network_text = ("> done loading network:\n> network contains %s nodes and %s links" % (G1.number_of_nodes(),
                                                                                               G1.number_of_edges()))
        all_genes_in_network2=set(G1.nodes())
        tools.remove_self_links(G1)
        genes_A_full=tools.read_gene_list(gene_file2A)
        gene_A_text = ("> done reading genes:\n> %s genes found in %s" % (len(genes_A_full), gene_file2A))
        genes_A=genes_A_full & all_genes_in_network2
        if len(genes_A_full) != len(genes_A):
            nodes_text=("> ignoring %s genes that are not in the network\n> remaining number of genes: %s"% (
                len(genes_A_full - all_genes_in_network2),len(genes_A)))
        genes_B_full=tools.read_gene_list(gene_file2B)
        gene_B_text = ("> done reading genes:\n> %s genes found in %s" % (len(genes_B_full), gene_file2B))
        genes_B=genes_B_full & all_genes_in_network2
        if len(genes_B_full) != len(genes_B):
            nodes_text2=("> ignoring %s genes that are not in the network\n> remaining number of genes: %s"% (
                len(genes_B_full - all_genes_in_network2),len(genes_B)))
    def dA(self):
        global G1
        global da_text
        global d_A
        d_A=tools.calc_single_set_distance(G1,genes_A)
        da_text=("\n> gene set A from \"%s\": %s genes\nnetwork-diameter d_A = %s"%(gene_file2A,len(genes_A),d_A))
    def dB(self):
        global G1
        global db_text
        global d_B
        d_B=tools.calc_single_set_distance(G1,genes_B)
        db_text=("\n> gene set B from \"%s\": %s genes\nnetwork-diameter d_B = %s"%(gene_file2B,len(genes_B),d_B))
    def dAB(self):
        global d_AB
        global dab_text
        d_AB = tools.calc_set_pair_distances(G1, genes_A, genes_B)
        dab_text=("> mean shortest distance between A & B:\n\td_AB = %s "%d_AB)
    def sAB(self):
        global s_AB
        global sab_text
        self.dA()
        self.dB()
        self.dAB()
        s_AB=d_AB - (d_A + d_B) / 2.
        sab_text=("\n> network separation of A & B:\n\ts_AB = %s"%s_AB)
    def times(self):
        global paths_times
        paths_times = int(self.comboBox.currentText())
        # print(paths_times)
    def Reference_genome(self):
        global Reference_genome
        Reference_genome=str(self.comboBox_2.currentText())
        # print(Reference_genome)
    def random(self):
        global s_AB_rand
        global Pvalue_size
        global Pvalue_text
        global result_yuan
        self.sAB()
        numberA =len(genes_A)
        numberB =len(genes_B)
        random_s_AB_list=[]
        for i in range(1,paths_times+1):
            rand_seedsA=set(random.sample(all_genes_in_network2,numberA))
            rand_seedsB=set(random.sample(all_genes_in_network2,numberB))
            random_d_A = tools.calc_single_set_distance(G1,rand_seedsA)
            random_d_B = tools.calc_single_set_distance(G1,rand_seedsB)
            random_d_AB=tools.calc_set_pair_distances(G1,rand_seedsA,rand_seedsB)
            random_s_AB=random_d_AB-(random_d_A+random_d_B)/2.
            random_s_AB_list.append(round(random_s_AB,3))

        s_AB_rand=np.mean(random_s_AB_list)
        new_random_s_AB_list=[]
        lengths = len(random_s_AB_list)
        for i in range(0,lengths):
            if random_s_AB_list[i]>s_AB:
                new_random_s_AB_list.append(random_s_AB_list[i])
        new_lengths=len(new_random_s_AB_list)
        Pvalue_size=1-(new_lengths/len(random_s_AB_list))
        Pvalue_text=("> P-values of observed S_AB :%s\n----------------------------------------" % Pvalue_size )
        def all_list(arr):
            result = {}
            for i in set(arr):
                result[i] = arr.count(i)/len(random_s_AB_list)
            return result
        result_yuan=all_list(random_s_AB_list)
    def game_window(self):
        msg_box = QMessageBox(QMessageBox.Warning, "Stay Tuned", "Sorry, the game is under development,please stay tuned for\nversion 2.1 of Network Calculator. ")
        msg_box.exec_()

    def picture_check(self):
        x = result_yuan.keys()
        y = result_yuan.values()
        plt.xlabel('s_AB')
        plt.ylabel('Frequency')
        plt.bar(x, y,width=0.001,edgecolor='black',linewidth=0.001)
        plt.title("The histogram of s_AB-Frequency")
        plt.legend()
        plt.savefig('random_s_AB_final.pdf')
        plt.close()
    def check(self):
        global built_in_network1
        global d_a_compute
        global d_b_compute
        global d_ab_compute
        global s_ab_compute
        global Pvalue
        global picture
        built_in_network1='True' if self.checkBox.isChecked() else 'False'
        d_a_compute = 'True' if self.checkBox_2.isChecked() else 'False'
        d_b_compute = 'True' if self.checkBox_3.isChecked() else 'False'
        d_ab_compute = 'True' if self.checkBox_7.isChecked() else 'False'
        s_ab_compute = 'True' if self.checkBox_5.isChecked() else 'False'
        Pvalue= 'True' if self.checkBox_4.isChecked() else 'False'
        picture='True' if self.comboBox_9.isChecked() else 'False'
    def start(self):
        self.nodes_and_links()
        self.textBrowser_6.setText("The calculation results are as follows:")
        self.textBrowser_6.append(network_text)
        self.textBrowser_6.append(gene_A_text)
        self.textBrowser_6.append(gene_B_text)
        if d_a_compute=='True':
            self.dA()
            self.textBrowser_6.append(da_text)
        if d_b_compute=='True':
            self.dB()
            self.textBrowser_6.append(db_text)
        if d_ab_compute=='True':
            self.dAB()
            self.textBrowser_6.append(dab_text)
        if s_ab_compute=='True':
            self.sAB()
            self.textBrowser_6.append(sab_text)
        if Pvalue=='True':
            self.random()
            self.textBrowser_6.append(Pvalue_text)
            if picture == 'True':
                self.picture_check()
    def citation(self):
        url = 'http://123.128.12.86:8090/'
        webbrowser.open(url)
    def messagebox(self):
        msg_box = QMessageBox(QMessageBox.Warning, "Unable to connect server", "Please check the updates mannually")
        msg_box.exec_()
class Ui_MainWindow2(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(754, 632)
        MainWindow.setStyleSheet("background-color:#D3E8E7;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 751, 571))
        self.tabWidget.setStyleSheet("background:#D3E8E7;")
        self.tabWidget.setObjectName("tabWidget")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.groupBox = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox.setGeometry(QtCore.QRect(0, 0, 741, 551))
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(240, 30, 301, 16))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_3.setGeometry(QtCore.QRect(0, 60, 741, 111))
        self.groupBox_3.setObjectName("groupBox_3")
        self.textBrowser = QtWidgets.QTextBrowser(self.groupBox_3)
        self.textBrowser.setGeometry(QtCore.QRect(10, 20, 611, 31))
        self.textBrowser.setObjectName("textBrowser")
        self.toolButton = QtWidgets.QToolButton(self.groupBox_3)
        self.toolButton.setGeometry(QtCore.QRect(630, 20, 81, 31))
        self.toolButton.setStyleSheet("background-color:pink;")
        self.toolButton.setObjectName("toolButton")
        self.checkBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.checkBox.setGeometry(QtCore.QRect(20, 70, 341, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.checkBox.setFont(font)
        self.checkBox.setObjectName("checkBox")
        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_4.setGeometry(QtCore.QRect(430, 70, 121, 31))
        self.pushButton_4.setStyleSheet("background-color:pink")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_5.setGeometry(QtCore.QRect(590, 70, 121, 31))
        self.pushButton_5.setStyleSheet("background-color:pink")
        self.pushButton_5.setObjectName("pushButton_5")
        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_4.setGeometry(QtCore.QRect(0, 180, 741, 71))
        self.groupBox_4.setObjectName("groupBox_4")
        self.textBrowser_4 = QtWidgets.QTextBrowser(self.groupBox_4)
        self.textBrowser_4.setGeometry(QtCore.QRect(10, 20, 611, 31))
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.toolButton_2 = QtWidgets.QToolButton(self.groupBox_4)
        self.toolButton_2.setGeometry(QtCore.QRect(630, 20, 81, 31))
        self.toolButton_2.setStyleSheet("background-color:pink;")
        self.toolButton_2.setObjectName("toolButton_2")
        self.pushButton_8 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_8.setGeometry(QtCore.QRect(10, 460, 341, 81))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(26)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setStyleSheet("background-color:pink")
        self.pushButton_8.setObjectName("pushButton_8")
        self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_5.setGeometry(QtCore.QRect(0, 255, 361, 71))
        self.groupBox_5.setObjectName("groupBox_5")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox_5)
        self.lineEdit.setGeometry(QtCore.QRect(30, 30, 121, 21))
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_6.setGeometry(QtCore.QRect(0, 330, 361, 121))
        self.groupBox_6.setObjectName("groupBox_6")
        self.checkBox_2 = QtWidgets.QCheckBox(self.groupBox_6)
        self.checkBox_2.setGeometry(QtCore.QRect(30, 25, 241, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.checkBox_2.setFont(font)
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(self.groupBox_6)
        self.checkBox_3.setGeometry(QtCore.QRect(30, 86, 251, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.checkBox_3.setFont(font)
        self.checkBox_3.setObjectName("checkBox_3")
        self.label_3 = QtWidgets.QLabel(self.groupBox_6)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.label_3.setFont(font)
        self.label_3.setGeometry(QtCore.QRect(30, 55, 80, 21))
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox_6)
        self.lineEdit_2.setGeometry(QtCore.QRect(125, 55, 111, 21))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.groupBox_2 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_2.setGeometry(QtCore.QRect(370, 255, 361, 296))
        self.groupBox_2.setObjectName("groupBox_2")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.groupBox_2)
        self.textBrowser_3.setGeometry(QtCore.QRect(10, 20, 341, 256))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.tabWidget.addTab(self.tab_2, "")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(230, 580, 411, 21))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 580, 91, 23))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color:pink")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(120, 580, 91, 23))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(12)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("background-color:pink")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(660, 580, 75, 23))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(12)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("background-color:pink")
        self.pushButton_3.setObjectName("pushButton_3")
        self.textBrowser_2.raise_()
        self.pushButton.raise_()
        self.pushButton_2.raise_()
        self.pushButton_3.raise_()
        self.tabWidget.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 754, 23))
        self.menubar.setObjectName("menubar")
        self.menuGene_network = QtWidgets.QMenu(self.menubar)
        self.menuGene_network.setObjectName("menuGene_network")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        MainWindow.setMenuBar(self.menubar)
        self.actionGene_network_connect = QtWidgets.QAction(MainWindow)
        self.actionGene_network_connect.setObjectName("actionGene_network_connect")
        self.actionMaxium = QtWidgets.QAction(MainWindow)
        self.actionMaxium.setObjectName("actionMaxium")
        self.actionRandom_Walk_based_on_Restart = QtWidgets.QAction(MainWindow)
        self.actionRandom_Walk_based_on_Restart.setObjectName("actionRandom_Walk_based_on_Restart")
        self.actionAbout_Calculator = QtWidgets.QAction(MainWindow)
        self.actionAbout_Calculator.setObjectName("actionAbout_Calculator")
        self.actionAbout_Website = QtWidgets.QAction(MainWindow)
        self.actionAbout_Website.setObjectName("actionAbout_Website")
        self.menuGene_network.addAction(self.actionGene_network_connect)
        self.menuGene_network.addSeparator()
        self.menuGene_network.addAction(self.actionMaxium)
        self.menuGene_network.addSeparator()
        self.menuGene_network.addAction(self.actionRandom_Walk_based_on_Restart)
        self.menuAbout.addAction(self.actionAbout_Calculator)
        self.menuAbout.addSeparator()
        self.menuAbout.addAction(self.actionAbout_Website)
        self.menubar.addAction(self.menuGene_network.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Network Calculator"))
        self.groupBox.setTitle(_translate("MainWindow", "Random Walk with Restart"))
        self.label.setText(_translate("MainWindow", "Random Walk with Restart"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Importing network file"))
        self.toolButton.setText(_translate("MainWindow", "..."))
        self.toolButton.clicked.connect(self.import_gene_file)
        self.checkBox.setText(_translate("MainWindow", "using the built-in gene network file"))
        self.checkBox.stateChanged.connect(self.check)
        self.pushButton_4.setText(_translate("MainWindow", "Clear"))
        self.pushButton_4.clicked.connect(self.clear)
        self.pushButton_5.setText(_translate("MainWindow", "Import"))
        self.pushButton_5.clicked.connect(self.import_built_in_gene_network)
        self.groupBox_4.setTitle(_translate("MainWindow", "Importing seed genes"))
        self.toolButton_2.setText(_translate("MainWindow", "..."))
        self.toolButton_2.clicked.connect(self.import_seed_file)
        self.pushButton_8.setText(_translate("MainWindow", "START"))
        self.pushButton_8.clicked.connect(self.start)
        self.groupBox_5.setTitle(_translate("MainWindow", "Restart probability(a value from 0 to 1)"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Output"))
        self.checkBox_2.setText(_translate("MainWindow", "Showing partial results"))
        self.checkBox_2.stateChanged.connect(self.check)
        self.label_3.setText("Number")
        self.checkBox_3.setText(_translate("MainWindow", "Exporting file with all results"))
        self.checkBox_3.stateChanged.connect(self.check)
        self.groupBox_2.setTitle(_translate("MainWindow", "Result"))
        self.textBrowser_3.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Main Window"))
        self.textBrowser_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If you found this tool\'s useful,let me know. Send me an email . -- Q H X( 2721729832@qq.com )</p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Version"))
        self.pushButton.clicked.connect(self.messagebox)
        self.pushButton_2.setText(_translate("MainWindow", "Citation"))
        self.pushButton_2.clicked.connect(self.citation)
        self.pushButton_3.setText(_translate("MainWindow", "Quit"))
        self.pushButton_3.clicked.connect(quit)
        self.menuGene_network.setTitle(_translate("MainWindow", "Tools"))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.actionGene_network_connect.setText(_translate("MainWindow", "Gene network connection analysis"))
        self.actionMaxium.setText(_translate("MainWindow", "Maximum connection value analysis"))
        self.actionRandom_Walk_based_on_Restart.setText(_translate("MainWindow", "Random Walk with Restart(This window)"))
        self.actionAbout_Calculator.setText(_translate("MainWindow", "About Calculator"))
        self.actionAbout_Calculator.triggered.connect(self.abouttip)
        self.actionAbout_Website.setText(_translate("MainWindow", "Official Website"))
        self.actionAbout_Website.triggered.connect(self.citation)
    def citation(self):
        url = 'http://123.128.12.86:8090/'
        webbrowser.open(url)
    def messagebox(self):
        msg_box = QMessageBox(QMessageBox.Warning, "Unable to connect server", "Please check the updates mannually")
        msg_box.exec_()
    def check(self):
        global built_in_network2
        global partial_display
        global file_output
        built_in_network2='True' if self.checkBox.isChecked() else 'False'
        partial_display='True' if self.checkBox_2.isChecked() else 'False'
        file_output = 'True' if self.checkBox_3.isChecked() else 'False'
    def abouttip(self):
        about_box=QMessageBox(QMessageBox.about(self,"Tip","The About file has been saved in the current directory "))
    def import_gene_file(self):
        global input_graph
        fileName2, filetype = QFileDialog.getOpenFileName(self, "选取文件", "./",
                                                          "All Files (*);;Excel Files (*.xls)")
        self.textBrowser.setText(fileName2)
        input_graph=fileName2
    def import_built_in_gene_network(self):
        global input_graph
        if built_in_network2 == 'True':
            file_name = 'all_PPIs_RWR.txt'
            input_graph= file_name
            self.textBrowser.setText(input_graph)
    def clear(self):
        global input_graph
        input_graph = ''
        self.textBrowser.setText(gene_network_file)
    def clear_seed(self):
        global seed
        seed = ''
        self.textBrowser_4.setText(gene_network_file)
    def import_seed_file(self):
        global seed
        fileName3, filetype = QFileDialog.getOpenFileName(self, "选取文件", "./",
                                                          "All Files (*);;Excel Files (*.xls)")
        self.textBrowser_4.setText(fileName3)
        seed = fileName3
    def deal_seed(self):
        G_walk = tools.read_network(input_graph)
        genes_set = tools.read_gene_list(seed)
        all_genes_in_network = set(G_walk.nodes())
        tools.remove_self_links(G_walk)
        gene_set = genes_set & all_genes_in_network
        deal=open('dealed_seeds.txt','w')
        for i in range(0,len(list(gene_set))):
            print(list(gene_set)[i],file=deal)
    def start(self):
        global seed
        global input_graph
        global partial_number
        global restart_prob
        global Temporary_text
        global partial_number
        self.deal_seed()
        seed='dealed_seeds.txt'
        restart_prob = float(self.lineEdit.text())
        original_graph_prob = 0.1
        low_list = None
        remove = None
        node_list = None
        seed_list = tool_walk.generate_seed_list(seed)
        node_list = tool_walk.get_node_list(node_list) if node_list else []
        # filter nodes we want to remove out of the starting seed, if any
        remove_list = remove if remove else []
        if remove_list:
            seed_list = [s for s in seed_list if s not in remove_list]
        wk = tool_walk.Walker(input_graph, low_list, remove_list)
        wk.run_exp(file_output , seed_list,restart_prob,
                   original_graph_prob, node_list)
        if partial_display == 'True':
            self.textBrowser_3.setText('')
            partial_number = int(self.lineEdit_2.text())
            for i in range(0,partial_number):
                line=linecache.getline('walker_result.txt',i)
                self.textBrowser_3.append(line)
        self.textBrowser_3.append("Random walk analysis has been completed!")
# ************************ finished










